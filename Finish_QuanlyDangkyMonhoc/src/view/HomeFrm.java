/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.DataController;
import controller.DataControllerImp;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Course;
import model.Registering;
import model.Student;
import model.Subject;

/**
 *
 * @author TL209
 */
public class HomeFrm extends javax.swing.JFrame implements ActionListener {

    private List<Subject> subjects;
    private List<Student> students;
    private List<Registering> registerings;
    private List<Course> courses;

    private DefaultTableModel tableModelSubject;
    private DefaultTableModel tableModelStudent;
    private DefaultTableModel tableModelRegistering;
    private DefaultTableModel tableModelCourse;
    private DataController dataController;
    private SimpleDateFormat simpleDateFormat;

    private int selectedIndex;

    /**
     * Creates new form HomeFrm
     */
    public HomeFrm() {
        initComponents();
        setLocationRelativeTo(null);
        addButtonGroup();
        addActionListener();
        subjects = new ArrayList<>();
        tableModelSubject = (DefaultTableModel) tblSubject.getModel();
        tableModelStudent = (DefaultTableModel) tblStudent.getModel();
        tableModelRegistering = (DefaultTableModel) tblRegistering.getModel();
        tableModelCourse = (DefaultTableModel) tblCourse.getModel();
        dataController = new DataControllerImp();
        simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        selectedIndex = -1;
        loadData();
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupSortSubject = new javax.swing.ButtonGroup();
        buttonGroupSearchSubject = new javax.swing.ButtonGroup();
        buttonGroupSearchStudent = new javax.swing.ButtonGroup();
        buttonGroupSortStudent = new javax.swing.ButtonGroup();
        buttonGroupSearchRegistering = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        rbSortSubjectNameASC = new javax.swing.JRadioButton();
        rbSortSubjectNameDESC = new javax.swing.JRadioButton();
        rbSortSubjectLessonASC = new javax.swing.JRadioButton();
        rbSortSubjectLessonDESC = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        rbSearchSubjectByName = new javax.swing.JRadioButton();
        rbSearchSubjectByLesson = new javax.swing.JRadioButton();
        txtSearchSubjectByName = new javax.swing.JTextField();
        btnSearchSubject = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtSearchSubjectLessonFrom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtSearchSubjectLessonTo = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSubject = new javax.swing.JTable();
        btnRefreshSubject = new javax.swing.JButton();
        btnAddNewSubject = new javax.swing.JButton();
        btnEditSubject = new javax.swing.JButton();
        btnRemoveSubject = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        rbSortStudentNameASC = new javax.swing.JRadioButton();
        rbSortStudentNameDESC = new javax.swing.JRadioButton();
        rbSortStudentIdASC = new javax.swing.JRadioButton();
        jPanel13 = new javax.swing.JPanel();
        rbSearchStudentByName = new javax.swing.JRadioButton();
        rbSearchStudentId = new javax.swing.JRadioButton();
        txtSearchStudentByName = new javax.swing.JTextField();
        btnSearchStudent = new javax.swing.JButton();
        txtSearchStudentById = new javax.swing.JTextField();
        rbSearchStudentByMajor = new javax.swing.JRadioButton();
        comboStudentMajor = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        btnRefreshStudent = new javax.swing.JButton();
        btnAddNewStudent = new javax.swing.JButton();
        btnEditStudent = new javax.swing.JButton();
        btnRemoveStudent = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        rbSearchRegByStudentName = new javax.swing.JRadioButton();
        rbSearchReByTime = new javax.swing.JRadioButton();
        txtSearchRegisteringByStudentName = new javax.swing.JTextField();
        btnSearchRegistering = new javax.swing.JButton();
        txtSearchReByRegisteringTimeFrom = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        comboxSortRegistering = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSearchReByRegisteringTimeTo = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblRegistering = new javax.swing.JTable();
        btnRefreshRegistering = new javax.swing.JButton();
        btnAddNewRegistering = new javax.swing.JButton();
        btnRemoveRegistering = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        btnCreateCourse = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUẢN LÝ ĐĂNG KÝ MÔN HỌC");
        setResizable(false);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp danh sách môn học", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        rbSortSubjectNameASC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSortSubjectNameASC.setText("Theo tên a-z");

        rbSortSubjectNameDESC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSortSubjectNameDESC.setText("Theo tên z-a");

        rbSortSubjectLessonASC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSortSubjectLessonASC.setText("Theo số tiết tăng dần");

        rbSortSubjectLessonDESC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSortSubjectLessonDESC.setText("Theo số tiết giảm dần");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortSubjectNameASC, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSortSubjectNameDESC, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(rbSortSubjectLessonASC)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(rbSortSubjectLessonDESC, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortSubjectNameASC)
                    .addComponent(rbSortSubjectLessonASC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortSubjectLessonDESC)
                    .addComponent(rbSortSubjectNameDESC))
                .addGap(25, 25, 25))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm môn học", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        rbSearchSubjectByName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSearchSubjectByName.setText("Theo tên gần đúng");

        rbSearchSubjectByLesson.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSearchSubjectByLesson.setText("Theo số tiết học");

        txtSearchSubjectByName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnSearchSubject.setBackground(new java.awt.Color(204, 204, 204));
        btnSearchSubject.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSearchSubject.setText("Tìm");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Từ:");

        txtSearchSubjectLessonFrom.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Đến:");

        txtSearchSubjectLessonTo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchSubjectByName, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(rbSearchSubjectByLesson, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchSubjectLessonFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchSubjectLessonTo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtSearchSubjectByName))
                .addGap(45, 45, 45)
                .addComponent(btnSearchSubject))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchSubjectByName)
                    .addComponent(txtSearchSubjectByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchSubject)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbSearchSubjectByLesson)
                            .addComponent(jLabel3)
                            .addComponent(txtSearchSubjectLessonFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(txtSearchSubjectLessonTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))))
        );

        tblSubject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã môn học", "Tên môn học", "Tổng số tiết học", "Loại môn học"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblSubject);
        if (tblSubject.getColumnModel().getColumnCount() > 0) {
            tblSubject.getColumnModel().getColumn(3).setHeaderValue("Chuyên ngành");
        }

        btnRefreshSubject.setBackground(new java.awt.Color(204, 204, 204));
        btnRefreshSubject.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRefreshSubject.setText("Làm mới");

        btnAddNewSubject.setBackground(new java.awt.Color(204, 204, 204));
        btnAddNewSubject.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAddNewSubject.setText("Thêm môn học");

        btnEditSubject.setBackground(new java.awt.Color(204, 204, 204));
        btnEditSubject.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEditSubject.setText("Sửa môn học");

        btnRemoveSubject.setBackground(new java.awt.Color(204, 204, 204));
        btnRemoveSubject.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRemoveSubject.setText("Xóa môn học");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 355, Short.MAX_VALUE)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnRefreshSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154)
                        .addComponent(btnAddNewSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(157, 157, 157)
                        .addComponent(btnEditSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshSubject)
                    .addComponent(btnAddNewSubject)
                    .addComponent(btnEditSubject)
                    .addComponent(btnRemoveSubject))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1378, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("QUẢN LÝ MÔN HỌC", jPanel1);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp danh sách sinh viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        rbSortStudentNameASC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSortStudentNameASC.setText("Theo tên a-z");

        rbSortStudentNameDESC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSortStudentNameDESC.setText("Theo tên z-a");

        rbSortStudentIdASC.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSortStudentIdASC.setText("Theo mã sinh viên a-z");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortStudentIdASC)
                    .addComponent(rbSortStudentNameDESC, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSortStudentNameASC, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(rbSortStudentNameASC)
                .addGap(18, 18, 18)
                .addComponent(rbSortStudentNameDESC)
                .addGap(18, 18, 18)
                .addComponent(rbSortStudentIdASC)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm sinh viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel13.setToolTipText("");

        rbSearchStudentByName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSearchStudentByName.setText("Theo tên gần đúng");

        rbSearchStudentId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSearchStudentId.setText("Theo mã sinh viên");

        txtSearchStudentByName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnSearchStudent.setBackground(new java.awt.Color(204, 204, 204));
        btnSearchStudent.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSearchStudent.setText("Tìm");

        txtSearchStudentById.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        rbSearchStudentByMajor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSearchStudentByMajor.setText("Theo chuyên ngành");

        comboStudentMajor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboStudentMajor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Công nghệ thông tin", "Điện tử", "Viễn thông", "Quản trị kinh doanh", "Khoa học dữ liệu" }));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(rbSearchStudentByName, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchStudentByName, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbSearchStudentByMajor)
                            .addComponent(rbSearchStudentId))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchStudentById)
                            .addComponent(comboStudentMajor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(73, 73, 73)
                .addComponent(btnSearchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchStudentByName)
                    .addComponent(txtSearchStudentByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchStudentId)
                    .addComponent(txtSearchStudentById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchStudent))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchStudentByMajor)
                    .addComponent(comboStudentMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Tên sinh viên", "Ngày sinh", "Địa chỉ", "Email", "Số điện thoại", "Lớp", "Chuyên ngành", "Niên khóa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblStudent);
        if (tblStudent.getColumnModel().getColumnCount() > 0) {
            tblStudent.getColumnModel().getColumn(2).setHeaderValue("Ngày sinh");
            tblStudent.getColumnModel().getColumn(3).setHeaderValue("Địa chỉ");
            tblStudent.getColumnModel().getColumn(4).setHeaderValue("Email");
            tblStudent.getColumnModel().getColumn(5).setHeaderValue("Số điện thoại");
            tblStudent.getColumnModel().getColumn(6).setHeaderValue("Lớp");
            tblStudent.getColumnModel().getColumn(7).setHeaderValue("Chuyên ngành");
            tblStudent.getColumnModel().getColumn(8).setHeaderValue("Niên khóa");
        }

        btnRefreshStudent.setBackground(new java.awt.Color(204, 204, 204));
        btnRefreshStudent.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRefreshStudent.setText("Làm mới");

        btnAddNewStudent.setBackground(new java.awt.Color(204, 204, 204));
        btnAddNewStudent.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAddNewStudent.setText("Thêm sinh viên");

        btnEditStudent.setBackground(new java.awt.Color(204, 204, 204));
        btnEditStudent.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEditStudent.setText("Sửa sinh viên");

        btnRemoveStudent.setBackground(new java.awt.Color(204, 204, 204));
        btnRemoveStudent.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRemoveStudent.setText("Xóa sinh viên");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(btnRefreshStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154)
                        .addComponent(btnAddNewStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(157, 157, 157)
                        .addComponent(btnEditStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 455, Short.MAX_VALUE)
                        .addComponent(btnRemoveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshStudent)
                    .addComponent(btnAddNewStudent)
                    .addComponent(btnEditStudent)
                    .addComponent(btnRemoveStudent))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1378, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("QUẢN LÝ SINH VIÊN", jPanel2);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm và sắp xếp bảng đăng ký", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel16.setToolTipText("");

        rbSearchRegByStudentName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSearchRegByStudentName.setText("Tìm kiếm theo tên sinh viên:");

        rbSearchReByTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        rbSearchReByTime.setText("Tìm kiếm theo thời gian đăng ký:");

        txtSearchRegisteringByStudentName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnSearchRegistering.setBackground(new java.awt.Color(204, 204, 204));
        btnSearchRegistering.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSearchRegistering.setText("Tìm kiếm");

        txtSearchReByRegisteringTimeFrom.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Sắp xếp theo: ");

        comboxSortRegistering.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comboxSortRegistering.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên tăng dần a - z", "Tên giảm dần z - a", "Thời gian đăng ký sớm-muộn", "Thời gian đăng ký muộn-sớm", " " }));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Nhập tên sinh viên: ");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Từ ngày:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Đến ngày:");

        txtSearchReByRegisteringTimeTo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(341, 341, 341)
                        .addComponent(jLabel1)
                        .addGap(63, 63, 63)
                        .addComponent(comboxSortRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbSearchRegByStudentName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbSearchReByTime))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addGap(29, 29, 29)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearchReByRegisteringTimeTo, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                    .addComponent(txtSearchReByRegisteringTimeFrom)
                    .addComponent(txtSearchRegisteringByStudentName))
                .addGap(54, 54, 54)
                .addComponent(btnSearchRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboxSortRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchRegByStudentName)
                    .addComponent(jLabel2)
                    .addComponent(txtSearchRegisteringByStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchReByRegisteringTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchReByTime)
                    .addComponent(jLabel5)
                    .addComponent(btnSearchRegistering))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSearchReByRegisteringTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        tblRegistering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Tên sinh viên", "Lớp", "Mã môn", "Tên môn", "Thời gian đăng ký"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblRegistering);

        btnRefreshRegistering.setBackground(new java.awt.Color(204, 204, 204));
        btnRefreshRegistering.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRefreshRegistering.setText("Làm mới");

        btnAddNewRegistering.setBackground(new java.awt.Color(204, 204, 204));
        btnAddNewRegistering.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAddNewRegistering.setText("Thêm đăng ký");
        btnAddNewRegistering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewRegisteringActionPerformed(evt);
            }
        });

        btnRemoveRegistering.setBackground(new java.awt.Color(204, 204, 204));
        btnRemoveRegistering.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnRemoveRegistering.setText("Xóa đăng ký");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(btnRefreshRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 381, Short.MAX_VALUE)
                        .addComponent(btnAddNewRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(280, 280, 280)
                        .addComponent(btnRemoveRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130))
                    .addComponent(jPanel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshRegistering)
                    .addComponent(btnAddNewRegistering)
                    .addComponent(btnRemoveRegistering))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1378, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 773, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 90, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("QUẢN LÝ ĐĂNG KÝ", jPanel3);

        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lớp học phần", "Mã sinh viên", "Tên sinh viên", "Lớp sinh viên", "Mã môn", "Tên môn", "Thời gian đăng ký"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblCourse);

        btnCreateCourse.setBackground(new java.awt.Color(204, 204, 204));
        btnCreateCourse.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCreateCourse.setText("Lập danh sách lớp");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addComponent(jScrollPane5)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(0, 615, Short.MAX_VALUE)
                .addComponent(btnCreateCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(613, 613, 613))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnCreateCourse)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("PHÂN LỚP HỌC", jPanel10);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/turn-off-24px.png"))); // NOI18N
        jMenuItem1.setText("Thoát");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnAddNewRegisteringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewRegisteringActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddNewRegisteringActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewRegistering;
    private javax.swing.JButton btnAddNewStudent;
    private javax.swing.JButton btnAddNewSubject;
    private javax.swing.JButton btnCreateCourse;
    private javax.swing.JButton btnEditStudent;
    private javax.swing.JButton btnEditSubject;
    private javax.swing.JButton btnRefreshRegistering;
    private javax.swing.JButton btnRefreshStudent;
    private javax.swing.JButton btnRefreshSubject;
    private javax.swing.JButton btnRemoveRegistering;
    private javax.swing.JButton btnRemoveStudent;
    private javax.swing.JButton btnRemoveSubject;
    private javax.swing.JButton btnSearchRegistering;
    private javax.swing.JButton btnSearchStudent;
    private javax.swing.JButton btnSearchSubject;
    private javax.swing.ButtonGroup buttonGroupSearchRegistering;
    private javax.swing.ButtonGroup buttonGroupSearchStudent;
    private javax.swing.ButtonGroup buttonGroupSearchSubject;
    private javax.swing.ButtonGroup buttonGroupSortStudent;
    private javax.swing.ButtonGroup buttonGroupSortSubject;
    private javax.swing.JComboBox<String> comboStudentMajor;
    private javax.swing.JComboBox<String> comboxSortRegistering;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton rbSearchReByTime;
    private javax.swing.JRadioButton rbSearchRegByStudentName;
    private javax.swing.JRadioButton rbSearchStudentByMajor;
    private javax.swing.JRadioButton rbSearchStudentByName;
    private javax.swing.JRadioButton rbSearchStudentId;
    private javax.swing.JRadioButton rbSearchSubjectByLesson;
    private javax.swing.JRadioButton rbSearchSubjectByName;
    private javax.swing.JRadioButton rbSortStudentIdASC;
    private javax.swing.JRadioButton rbSortStudentNameASC;
    private javax.swing.JRadioButton rbSortStudentNameDESC;
    private javax.swing.JRadioButton rbSortSubjectLessonASC;
    private javax.swing.JRadioButton rbSortSubjectLessonDESC;
    private javax.swing.JRadioButton rbSortSubjectNameASC;
    private javax.swing.JRadioButton rbSortSubjectNameDESC;
    private javax.swing.JTable tblCourse;
    private javax.swing.JTable tblRegistering;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTable tblSubject;
    private javax.swing.JTextField txtSearchReByRegisteringTimeFrom;
    private javax.swing.JTextField txtSearchReByRegisteringTimeTo;
    private javax.swing.JTextField txtSearchRegisteringByStudentName;
    private javax.swing.JTextField txtSearchStudentById;
    private javax.swing.JTextField txtSearchStudentByName;
    private javax.swing.JTextField txtSearchSubjectByName;
    private javax.swing.JTextField txtSearchSubjectLessonFrom;
    private javax.swing.JTextField txtSearchSubjectLessonTo;
    // End of variables declaration//GEN-END:variables

    private void addButtonGroup() {
        buttonGroupSearchSubject.add(rbSearchSubjectByName);
        buttonGroupSearchSubject.add(rbSearchSubjectByLesson);

        buttonGroupSortSubject.add(rbSortSubjectLessonASC);
        buttonGroupSortSubject.add(rbSortSubjectLessonDESC);
        buttonGroupSortSubject.add(rbSortSubjectNameDESC);
        buttonGroupSortSubject.add(rbSortSubjectNameASC);

        buttonGroupSearchStudent.add(rbSearchStudentId);
        buttonGroupSearchStudent.add(rbSearchStudentByName);
        buttonGroupSearchStudent.add(rbSearchStudentByMajor);

        buttonGroupSortStudent.add(rbSortStudentIdASC);
        buttonGroupSortStudent.add(rbSortStudentNameASC);
        buttonGroupSortStudent.add(rbSortStudentNameDESC);

        buttonGroupSearchRegistering.add(rbSearchRegByStudentName);
        buttonGroupSearchRegistering.add(rbSearchReByTime);
    }

    private void addActionListener() {
        btnAddNewSubject.addActionListener(this);
        btnEditSubject.addActionListener(this);
        btnRemoveSubject.addActionListener(this);
        btnRefreshSubject.addActionListener(this);
        btnSearchSubject.addActionListener(this);

        btnAddNewStudent.addActionListener(this);
        btnEditStudent.addActionListener(this);
        btnRefreshStudent.addActionListener(this);
        btnRemoveStudent.addActionListener(this);

        rbSearchSubjectByName.addActionListener(this);
        rbSearchSubjectByLesson.addActionListener(this);
        rbSortSubjectLessonASC.addActionListener(this);
        rbSortSubjectLessonDESC.addActionListener(this);
        rbSortSubjectNameASC.addActionListener(this);
        rbSortSubjectNameDESC.addActionListener(this);

        rbSearchStudentByMajor.addActionListener(this);
        rbSearchStudentByName.addActionListener(this);
        rbSearchStudentId.addActionListener(this);
        rbSortStudentIdASC.addActionListener(this);
        rbSortStudentNameASC.addActionListener(this);
        rbSortStudentNameDESC.addActionListener(this);

        btnSearchStudent.addActionListener(this);

        btnAddNewRegistering.addActionListener(this);
        btnRefreshRegistering.addActionListener(this);
        btnRemoveRegistering.addActionListener(this);
        comboxSortRegistering.addActionListener(this);
        btnSearchRegistering.addActionListener(this);
        rbSearchRegByStudentName.addActionListener(this);
        rbSearchReByTime.addActionListener(this);

        btnCreateCourse.addActionListener(this);
    }

    public void addSubjectCallback(Subject subject) {
        subjects.add(subject);
        showSubject(subject);
        saveData(DataController.SUBJECT);
    }

    public void addStudentCallback(Student student) {
        students.add(student);
        showStudent(student);
        saveData(dataController.STUDENT);
    }

    public void addRegisteringCallback(Registering registering) {
        registerings.add(registering);
        showRegistering(registering);
        saveData(dataController.REGISTERING);
    }

    public void editStudentCallback(Student student) {
        selectedIndex = tblStudent.getSelectedRow();
        tableModelStudent.removeRow(selectedIndex);
        var format = "dd/MM/yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(format);
        Object[] row = new Object[]{
            student.getStudentId(), student.getFullName(), dateFormat.format(student.getDob()), student.getAddress(), student.getEmail(), student.getPhoneNumber(), student.getStudentClass(), student.getMajor(), student.getSchoolYear()
        };
        tableModelStudent.insertRow(selectedIndex, row);
        students.set(selectedIndex, student);
        saveData(dataController.STUDENT);
        selectedIndex = -1;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // Thực hiện các hành động
        var obj = e.getSource();
        if (obj.equals(btnAddNewSubject)) {
            AddSubjectDialog addSubjectDialog = new AddSubjectDialog(this, rootPaneCheckingEnabled);
            addSubjectDialog.setVisible(true);
        } else if (obj.equals(btnRefreshSubject)) {
            refreshSubject();
        } else if (obj.equals(btnRemoveSubject)) {
            removeSubject();
        } else if (obj.equals(btnEditSubject)) {
            editSubject();
        } else if (obj.equals(rbSortSubjectNameASC)
                || obj.equals(rbSortSubjectNameDESC)
                || obj.equals(rbSortSubjectLessonASC)
                || obj.equals(rbSortSubjectLessonDESC)) {
            sortSubject(obj);
        } else if (obj.equals(btnSearchSubject)) {
            searchSubjects();
        } else if (obj.equals(btnAddNewStudent)) {
            addNewStudent();
        } else if (obj.equals(btnEditStudent)) {
            editStudent();
        } else if (obj.equals(btnRemoveStudent)) {
            removeStudent();
        } else if (obj.equals(btnRefreshStudent)) {
            refreshStudent();
        } else if (obj.equals(rbSortStudentIdASC)
                || obj.equals(rbSortStudentNameASC)
                || obj.equals(rbSortStudentNameDESC)) {
            sortStudent();
        } else if (obj.equals(rbSearchStudentId)
                || obj.equals(rbSearchStudentByName)
                || obj.equals(rbSearchStudentByMajor)) {
            checkSearchField();
        } else if (obj.equals(btnSearchStudent)) {
            searchStudents();
        } else if (obj.equals(btnAddNewRegistering)) {
            addNewRegistering();
        } else if (obj.equals(btnRemoveRegistering)) {
            removeRegistering();
        } else if (obj.equals(comboxSortRegistering)) {
            sortRegistering();
        } else if (obj.equals(btnSearchRegistering)) {
            searchRegistering();
        } else if (obj.equals(rbSearchRegByStudentName) || obj.equals(rbSearchReByTime)) {
            switchInputState();
        } else if (obj.equals(btnRefreshRegistering)) {
            refreshRegistering();
        } else if (obj.equals(btnCreateCourse)) {
            createCourse();
        }
    }

    private void showSubject(Subject subject) {
        Object[] row = new Object[]{
            subject.getId(), subject.getName(), subject.getNumOfLesson(), subject.getKind()
        };
        tableModelSubject.addRow(row);
    }

    private void loadData() {
        subjects = dataController.<Subject>readDataFromFile(DataController.SUBJECT_FILE);
        if (subjects.size() > 0) {
            editSubjectId();
        }
        students = dataController.<Student>readDataFromFile(DataController.STUDENT_FILE);
        
        registerings = dataController.<Registering>readDataFromFile(DataController.REGISTERING_FILE);

    }

    private void showData() {
        showSubjects();
        showStudents();
        showRegisterings();
    }

    private void showSubjects() {
        tableModelSubject.setRowCount(0);
        for (Subject subject : subjects) {
            showSubject(subject);
        }
    }

    private void saveData(int choice) {
        switch (choice) {
            case DataController.SUBJECT:
                dataController.<Subject>writeToFile(subjects, DataController.SUBJECT_FILE);
                break;
            case DataController.STUDENT:
                dataController.<Student>writeToFile(students, DataController.STUDENT_FILE);
                break;
            case DataController.REGISTERING:
                dataController.<Registering>writeToFile(registerings, DataController.REGISTERING_FILE);
                break;
        }
    }

    private void editSubjectId() {
        int maxId = Subject.getsId();
        for (Subject subject : subjects) {
            if (subject.getId() > maxId) {
                maxId = subject.getId();
            }
        }
        Subject.setsId(maxId + 1);
    }

    private void removeSubject() {
        int selectedIndex = tblSubject.getSelectedRow();
        if (selectedIndex > -1) {
            var msg = "Bạn có chắc chắn muốn xóa bản ghi hay không?";
            int conform = JOptionPane.showConfirmDialog(rootPane, msg);
            if (conform == JOptionPane.OK_OPTION) {
                subjects.remove(selectedIndex);
                tableModelSubject.removeRow(selectedIndex);
                dataController.<Subject>writeToFile(subjects, DataController.SUBJECT_FILE);
                showDialogMessage("Xóa thành công!");
            }
        } else {
            showDialogMessage("Vui lòng chọn 1 bản ghi để xóa!");
        }
    }

    private void showDialogMessage(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    private void editSubject() {
        int selectedIndex = tblSubject.getSelectedRow();
        if (selectedIndex > -1) {
            Subject subject = subjects.get(selectedIndex);
            EditSubjectDialog editSubjectDialog = new EditSubjectDialog(this, rootPaneCheckingEnabled, subject);
            editSubjectDialog.setVisible(true);
        } else {
            showDialogMessage("Vui lòng chọn 1 bản ghi để xóa!");
        }
    }

    public void editSubjectCallback(Subject subject) {
        selectedIndex = tblSubject.getSelectedRow();
        subjects.set(selectedIndex, subject);
        tableModelSubject.removeRow(selectedIndex);
        Object[] row = new Object[]{
            subject.getId(), subject.getName(), subject.getNumOfLesson(), subject.getKind()
        };
        tableModelSubject.insertRow(selectedIndex, row);
        saveData(DataController.SUBJECT);
        selectedIndex = -1;
    }

    private void sortSubject(Object obj) {
        if (obj.equals(rbSortSubjectNameASC)) {
            dataController.sortSubjectByNameASC(subjects);
        } else if (obj.equals(rbSortSubjectNameDESC)) {
            dataController.sortSubjectByNameDESC(subjects);
        } else if (obj.equals(rbSortSubjectLessonASC)) {
            dataController.sortSubjectByNumOfLessonASC(subjects);
        } else if (obj.equals(rbSortSubjectLessonDESC)) {
            dataController.sortSubjectByNumOfLessonDESC(subjects);
        }
        showSubjects();
    }

    private void searchSubjects() {
        if (rbSearchSubjectByName.isSelected()) {
            var key = txtSearchSubjectByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên môn học cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchSubjectByName(subjects, key);
                subjects.clear();
                subjects.addAll(result);
                checkAndShowSearchResult();
            }
        } else if (rbSearchSubjectByLesson.isSelected()) {
            var fromValString = txtSearchSubjectLessonFrom.getText();
            var toValString = txtSearchSubjectLessonTo.getText();
            if (!fromValString.isEmpty() && !toValString.isEmpty()) {
                var fromValue = Integer.parseInt(fromValString);
                var toValue = Integer.parseInt(toValString);
                var result = dataController.searchSubjectByLesonRange(subjects, fromValue, toValue);
                subjects.clear();
                subjects.addAll(result);
                checkAndShowSearchResult();
            } else {
                var msg = "Vui lòng nhập đoạn giá trị của số tiết trong môn học cần tìm kiếm!";
                showDialogMessage(msg);
            }
        } else {
            var msg = "Vui lòng chọn tiêu chí tìm kiếm trước";
            showDialogMessage(msg);
        }
    }

    private void checkAndShowSearchResult() {
        if (subjects.size() > 0) {
            showSubjects();
            var msg = "Tìm thấy " + subjects.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            subjects.clear();
            showSubjects();
            var msg = "Không tìm thấy kết quả nào!";
            showDialogMessage(msg);
        }
    }

    private void refreshSubject() {
        var text = "";
        txtSearchSubjectByName.setText(text);
        txtSearchSubjectLessonFrom.setText(text);
        txtSearchSubjectLessonTo.setText(text);
        buttonGroupSortSubject.clearSelection();
        buttonGroupSearchSubject.clearSelection();
        subjects.clear();
        subjects.addAll(dataController.<Subject>readDataFromFile(DataController.SUBJECT_FILE));
        showSubjects();
    }

    private void addNewStudent() {
        AddStudentDialog addStudentDialog = new AddStudentDialog(this, rootPaneCheckingEnabled, students);
        addStudentDialog.setVisible(true);

    }

    private void showStudent(Student student) {
        var format = "dd/MM/yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(format);
        Object[] row = new Object[]{
            student.getStudentId(), student.getFullName(), dateFormat.format(student.getDob()), student.getAddress(), student.getEmail(), student.getPhoneNumber(), student.getStudentClass(), student.getMajor(), student.getSchoolYear()
        };
        tableModelStudent.addRow(row);
    }

    private void showStudents() {
        tableModelStudent.setRowCount(0);
        for (Student student : students) {
            showStudent(student);
        }
    }

    private void editStudent() {
        selectedIndex = tblStudent.getSelectedRow();
        if (selectedIndex > -1) {
            Student student = students.get(selectedIndex);
            EditStudentDialog editStudentDialog = new EditStudentDialog(this, rootPaneCheckingEnabled, student);
            editStudentDialog.setVisible(true);
        } else {
            var msg = "Vui lòng chọn 1 sinh viên để sửa!";
            showDialogMessage(msg);
        }
    }

    private void removeStudent() {
        int removeIndex = tblStudent.getSelectedRow();
        if (removeIndex >= 0) {
            var msg = "Bạn có chắc chắn muốn xóa bản ghi này không?";
            int returnValue = JOptionPane.showConfirmDialog(rootPane, msg);
            if (returnValue == JOptionPane.YES_OPTION) {
                tableModelStudent.removeRow(removeIndex);
                students.remove(removeIndex);
                dataController.<Student>writeToFile(students, DataController.STUDENT_FILE);
            }
        } else {
            var msg = "Vui lòng chọn 1 sinh viên để xóa!";
            showDialogMessage(msg);
        }
    }

    private void refreshStudent() {
        buttonGroupSortStudent.clearSelection();
        buttonGroupSearchStudent.clearSelection();
        txtSearchStudentById.setText("");
        txtSearchStudentByName.setText("");
        comboStudentMajor.setSelectedIndex(0);
        tableModelStudent.setRowCount(0);
        reloadStudent();
        showStudents();
    }

    private void reloadStudent() {
        students.clear();
        students.addAll(dataController.<Student>readDataFromFile(DataController.STUDENT_FILE));
    }

    private void sortStudent() {
        if (rbSortStudentIdASC.isSelected()) {
            dataController.sortStudentByStudentIdASC(students);
        } else if (rbSortStudentNameASC.isSelected()) {
            dataController.sortStudentByNameASC(students);
        } else if (rbSortStudentNameDESC.isSelected()) {
            dataController.sortStudentByNameDESC(students);
        }
        showStudents();
    }

    private void checkSearchField() {
        if (rbSearchStudentId.isSelected()) {
            txtSearchStudentById.setEnabled(true);
            txtSearchStudentByName.setEnabled(false);
            comboStudentMajor.setEnabled(false);
        } else if (rbSearchStudentByName.isSelected()) {
            txtSearchStudentById.setEnabled(false);
            txtSearchStudentByName.setEnabled(true);
            comboStudentMajor.setEnabled(false);
        } else if (rbSearchStudentByMajor.isSelected()) {
            txtSearchStudentById.setEnabled(false);
            txtSearchStudentByName.setEnabled(false);
            comboStudentMajor.setEnabled(true);
        }
    }

    private void searchStudents() {
        reloadStudent();
        if (rbSearchStudentId.isSelected()) {
            var key = txtSearchStudentById.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên mã sinh viên cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchStudentById(students, key);
                students.clear();
                students.addAll(result);
                checkAndShowSearchStudentResult();
            }
        } else if (rbSearchStudentByName.isSelected()) {
            var key = txtSearchStudentByName.getText();
            if (!key.isEmpty()) {
                var result = dataController.searchStudentByName(students, key);
                students.clear();
                students.addAll(result);
                checkAndShowSearchStudentResult();
            } else {
                var msg = "Vui lòng nhập tên sinh viên cần tìm kiếm!";
                showDialogMessage(msg);
            }
        } else if (rbSearchStudentByMajor.isSelected()) {
            var key = comboStudentMajor.getSelectedItem().toString();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên mã sinh viên cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchStudentByMajor(students, key);
                students.clear();
                students.addAll(result);
                checkAndShowSearchStudentResult();
            }
        } else {
            var msg = "Vui lòng chọn chuyên ngành tìm kiếm trước";
            showDialogMessage(msg);
        }
    }

    private void checkAndShowSearchStudentResult() {
        if (students.size() > 0) {
            showStudents();
            var msg = "Tìm thấy " + students.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            students.clear();
            showStudents();
            var msg = "Không tìm thấy kết quả nào!";
            showDialogMessage(msg);
        }
    }

    private void addNewRegistering() {
        AddRegisteringDialog addRegisteringDialog = new AddRegisteringDialog(this, true, students, subjects, registerings);
        addRegisteringDialog.setVisible(true);
    }

    private void showRegistering(Registering r) {
        Object[] row = new Object[]{
            r.getStudent().getStudentId(), r.getStudent().getFullName(), r.getStudent().getStudentClass(), r.getSubject().getId(), r.getSubject().getName(), simpleDateFormat.format(r.getRegistedDate())
        };
        tableModelRegistering.addRow(row);
    }

    private void showRegisterings() {
        tableModelRegistering.setRowCount(0);
        for (Registering registering : registerings) {
            showRegistering(registering);
        }
    }

    private void removeRegistering() {
        var index = tblRegistering.getSelectedRow();
        if (index > -1) {
            int retVal = JOptionPane.showConfirmDialog(rootPane, "Bạn có chắc muốn xóa bản ghi này không?");
            if (retVal == JOptionPane.YES_OPTION) {
                tableModelRegistering.removeRow(index);
                registerings.remove(index);
                saveData(DataController.REGISTERING);
                var msg = "Xóa thành công!";
                showDialogMessage(msg);
            }
        } else {
            var msg = "Vui lòng chọn 1 bản đăng ký để xóa!";
            showDialogMessage(msg);
        }
    }

    private void sortRegistering() {
        int option = comboxSortRegistering.getSelectedIndex();
        switch (option) {
            case 0:
                dataController.sortRegisteringByStudentNameAZ(registerings);
                break;
            case 1:
                dataController.sortRrgisteringByStudentNameZA(registerings);
                break;
            case 2:
                dataController.sortRrgisteringByStudentByRegisterTimeEL(registerings);
                break;
            case 3:
                dataController.sortRrgisteringByStudentByRegisterTimeLE(registerings);
                break;
        }
        showRegisterings();
    }

    private void searchRegistering() {
        reloadRegisterings();
        List<Registering> copyList = new ArrayList<>(registerings);
        if (rbSearchReByTime.isSelected()) {
            var fromStr = txtSearchReByRegisteringTimeFrom.getText().trim();
            var toStr = txtSearchReByRegisteringTimeTo.getText().trim();
            if (fromStr.isEmpty() || toStr.isEmpty()) {
                var msg = "Vui lòng nhập đầy đủ ngày đăng ký cần tìm" + "\nĐịnh dạng: dd/MM/yyyy";
                showDialogMessage(msg);
            } else {
                var format = "dd/MM/yyyy";
                var dateFormat = new SimpleDateFormat(format);
                try {
                    Date fromDate = dateFormat.parse(fromStr);
                    Date toDate = dateFormat.parse(toStr);
                    registerings.clear();
                    registerings.addAll(dataController.searchRegisterByRegisterTime(copyList, fromDate, toDate));
                    showRegisterings();
                    var msg = "Tìm thấy " + registerings.size() + " kết quả.";
                    showDialogMessage(msg);
                } catch (ParseException ex) {
                    var msg = "Vui lòng nhập đúng định dạng dd/MM/yyyy. \nVí dụ: 02/01/2000";
                    showDialogMessage(msg);
                }

            }
        } else if (rbSearchRegByStudentName.isSelected()) {
            var name = txtSearchRegisteringByStudentName.getText().trim();
            if (name.isEmpty()) {
                var msg = "Vui lòng nhập tên sinh viên để tìm kiếm";
                showDialogMessage(msg);
            } else {
                registerings.clear();
                registerings.addAll(dataController.searchRegisterByStudentName(copyList, name));
                showRegisterings();
                var msg = "Tìm thấy " + registerings.size() + " kết quả.";
                showDialogMessage(msg);
            }
        } else {
            var msg = "Vui lòng chọn phương thức tìm kiếm trước";
            showDialogMessage(msg);
        }
    }

    private void reloadRegisterings() {
        registerings.clear();
        registerings.addAll(dataController.<Registering>readDataFromFile(DataControllerImp.REGISTERING_FILE));
    }

    private void switchInputState() {
        if (rbSearchReByTime.isSelected()) {
            txtSearchReByRegisteringTimeFrom.setEnabled(true);
            txtSearchReByRegisteringTimeTo.setEnabled(true);
            txtSearchRegisteringByStudentName.setEnabled(false);
        } else if (rbSearchRegByStudentName.isSelected()) {
            txtSearchReByRegisteringTimeFrom.setEnabled(false);
            txtSearchReByRegisteringTimeTo.setEnabled(false);
            txtSearchRegisteringByStudentName.setEnabled(true);
        }
    }

    private void refreshRegistering() {
        txtSearchReByRegisteringTimeFrom.setEnabled(true);
        txtSearchReByRegisteringTimeTo.setEnabled(true);
        txtSearchRegisteringByStudentName.setEnabled(true);
        txtSearchReByRegisteringTimeFrom.setText("");
        txtSearchReByRegisteringTimeTo.setText("");
        txtSearchRegisteringByStudentName.setText("");
        comboxSortRegistering.setSelectedIndex(0);
        buttonGroupSearchRegistering.clearSelection();
        reloadRegisterings();
    }

    private void createCourse() {
        dataController.sortRrgisteringByStudentByRegisterTimeEL(registerings);
        courses = new ArrayList<>(dataController.createCourse(registerings, subjects));
        showCourse();
    }

    private void showCourse() {
        var emptyStr = "_";
        tableModelCourse.setRowCount(0);
        for (Course course : courses) {
            for (var r : course.getRegisterings()) {
                Object[] row = new Object[]{
                    course.getName(), r.getStudent().getStudentId(), r.getStudent().getFullName(), r.getStudent().getStudentClass(), r.getSubject().getId(), r.getSubject().getName(), simpleDateFormat.format(r.getRegistedDate())

                };
                tableModelCourse.addRow(row);
            }
            var row = new Object[]{emptyStr, emptyStr, emptyStr, emptyStr, emptyStr, emptyStr, emptyStr};
            tableModelCourse.addRow(row);
        }
    }
}
